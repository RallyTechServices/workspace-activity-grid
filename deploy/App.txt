<!DOCTYPE html>
<html>
<head>
    <title>Workspace Activity</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Mar 30 2016 22:00:51 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Mar 30 2016 22:00:51 GMT-0600 (MDT)";
        var CHECKSUM = 22108283900;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('Rally.technicalservices.promise.ParallelThrottle',{
    requires: ['Deft.promise.Promise'],
    statics: {

        throttle: function (fns, maxParallelCalls, scope) {

            if (maxParallelCalls <= 0 || fns.length < maxParallelCalls){
                return Deft.promise.Chain.parallel(fns, scope);
            }


            var parallelFns = [],
                fnChunks = [],
                idx = -1;

            for (var i = 0; i < fns.length; i++) {
                if (i % maxParallelCalls === 0) {
                    idx++;
                    fnChunks[idx] = [];
                }
                fnChunks[idx].push(fns[i]);
            }

            _.each(fnChunks, function (chunk) {
                parallelFns.push(function () {
                    return Deft.promise.Chain.parallel(chunk, scope);
                });
            });

            return Deft.Promise.reduce(parallelFns, function(groupResults, fnGroup) {
                return Deft.Promise.when(fnGroup.call(scope)).then(function(results) {
                    groupResults = groupResults.concat(results || []);
                    return groupResults;
                });
            }, []);
        }
    }
});

Ext.define('Rally.technicalservices.dialog.PickerDialog',{
    extend: 'Rally.ui.dialog.Dialog',

    autoShow: true,
    draggable: true,
    width: 400,
    height: 400,
    config:{
        selectedRecords: null,
        records: null,
        title: 'Select Workspace',
        displayFields: ['Name'],
        sortField: 'Name',
        sortDirection: 'ASC',
        filterField: 'Name'
    },
    constructor: function(config){
        Ext.apply(this.config,config);
        this.callParent(arguments);
    },
    initComponent: function() {
        this.logger = new Rally.technicalservices.Logger();
        this.title = this.getTitle();
        this.items = this._getItems();
        this.buttons = this._getButtonConfig();
        this.callParent(arguments);
        this.addEvents('itemselected');
        this._addItemGrid(this.config.records, this.displayField);
    },
    _getItemCtHeight: function(){
        return this.height - 150;
    },
    _addItemGrid: function(){

        var page_size = this.getRecords().length + 1;
        var data = _.map(this.getRecords(), function(r){return r.getData()});
        var store = Ext.create('Rally.data.custom.Store',{
            data: data,
            autoLoad: true,
            remoteSort: false,
            remoteFilter: false,
            pageSize: page_size,
            sorters: [{
                property: this.sortField,
                direction: this.sortDirection
            }]
        });


        var column_cfgs = [];
        Ext.each(this.displayFields, function(f){
            column_cfgs.push({
                text: f,
                dataIndex: f,
                flex: 1
            });
        });

        var selModel = Ext.create('Ext.selection.CheckboxModel',{
            injectCheckbox: 0,
            mode: 'MULTI'
        });
        selModel.select(this.getSelectedRecords());


        this.logger.log('_addItemGrid', store);
        var grid = this.down('#item_box').add({
            xtype: 'rallygrid',
            store: store,
            itemId: 'ct-item',
            height: this._getItemCtHeight(),
            width: this._getItemCtWidth(),
            margin: 15,
            showRowActionsColumn: false,
            // selType: 'checkboxmodel',
            selModel: selModel,
            //{
            //    injectCheckbox: 0,
            //    mode: 'MULTI'
            //},
            columnCfgs: column_cfgs,
            showPagingToolbar: false
        });
        grid.on('beforerender',function(grid){

            //var record = store.getAt(1);
            grid.getSelectionModel().select(this.getSelectedRecords());


        },this, {single: true});
    },
    _getItemCtWidth: function(){
        return this.width - 30;
    },
    _onApplyClick: function(){
        var selected_records = this.down('#ct-item').getSelectionModel().getSelection();
        this.fireEvent('itemselected',selected_records);
        this.destroy();
    },
    _onCancelClick: function() {
        this.destroy();
    },
    _getItems:function(){
        return [{
//            xtype: "container",
//            layout: {type: 'hbox'},
//            items: [{
//                xtype: 'rallytextfield',
//                itemId: 'txt-find',
//                fieldLabel: 'Filter',
//                labelAlign: 'right',
//                labelWidth: 50,
//                width: this._getItemCtWidth(),
//                margin: 10,
//                height: 21,
//                listeners: {
//                    scope: this,
//                    change: this._onFindUpdated
//                }
//            }]
//        },{
            xtype: "container",
            itemId: 'item_box'
        }];
    },
    _onFindUpdated: function(txt){
        var grid = this.down('#ct-item');
        var filterValue = txt.getValue();
        var filterField = this.filterField;
        var regex = new RegExp(filterValue, "gi");
        grid.getStore().filterBy(function(item){
            return regex.test(item.get(filterField));
        });
    },
    _getButtonConfig: function() {
        return [{
            xtype: "rallybutton",
            itemId: "cancelButton",
            cls: "secondary rly-small",
            text: "Cancel",
            width: 90,
            handler: this._onCancelClick,
            scope: this
        }, {
            xtype: "rallybutton",
            itemId: "applyButton",
            cls: "primary rly-small",
            text: "Apply",
            width: 90,
            handler: this._onApplyClick,
            scope: this
        }]
    }
});
Ext.define('Rally.technicalservices.WsapiToolbox', {
    singleton: true,
    fetchWsapiCount: function(config){
        var deferred = Ext.create('Deft.Deferred');

        var storeConfig = Ext.apply({
            fetch: ['ObjectID'],
            limit: 1,
            pageSize: 1
        },config);

        Ext.create('Rally.data.wsapi.Store',storeConfig).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} count for {1}: {2}", config.model, config.filters && config.filters.toString() || "(No Filter)", operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchRestorableTypeDefinitions: function(){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store', {
            model: 'TypeDefinition',
            fetch: ['TypePath', 'Ordinal','Name'],
            filters: [{
                property: 'Creatable',
                value: true
            },{
                property: 'Restorable',
                value: true
            }],
            sorters: [{
                property: 'Ordinal',
                direction: 'ASC'
            }]
        });
        store.load({
            callback: function(records, operation, success){

                if (success){
                    deferred.resolve(records);
                } else {
                    var error_msg = '';
                    if (operation && operation.error && operation.error.errors){
                        error_msg = operation.error.errors.join(',');
                    }
                    deferred.reject('Error loading Artifact Types:  ' + error_msg);
                }
            }
        });
        return deferred.promise;
    },
    fetchWorkspaces: function(){
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', {
            model: 'Subscription',
            fetch: ['Workspaces'],
            autoLoad: true,
            listeners: {
                scope: this,
                load: function(store, records, success){

                    if (success){
                        records[0].getCollection('Workspaces',{
                            fetch: ['ObjectID','Name','State','Projects:summary[State]'],
                            limit: 'Infinity',
                            buffered: false
                        }).load({
                            callback: function(records, operation, success){
                                var workspaces = [];
                                if (operation.wasSuccessful()){
                                    Ext.Array.each(records,function(record){
                                        var summaryInfo = record.get('Summary').Projects;
                                        var open_project_count = summaryInfo.State['Open'];
                                        if (record.get('State') == 'Open' && open_project_count > 0){
                                            record.set("id", record["ObjectID"]);
                                            workspaces.push(record);
                                        }
                                    },this);

                                    deferred.resolve(workspaces);
                                } else {
                                    deferred.reject('Error loading workspace information: ' + operation.getError());
                                }
                            }
                        });
                    } else {
                        deferred.reject('Error querying Subscription');
                    }
                }
            }
        });
        return deferred;
    }
    //fetchWsapiRecords: function(model, query_filters, fetch_fields, context){
    //    var deferred = Ext.create('Deft.Deferred');
    //
    //    var store = Ext.create('Rally.data.wsapi.Store',{
    //        model: model,
    //        fetch: fetch_fields,
    //        filters: query_filters,
    //        context: context,
    //        limit: Infinity
    //    }).load({
    //        callback: function(records, operation, success){
    //            if (success){
    //                deferred.resolve(records);
    //            } else {
    //                deferred.reject(Ext.String.format("Error getting {0} for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
    //            }
    //        }
    //    });
    //    return deferred;
    //},
    //fetchWsapiRecordsWithPaging: function(model, query_filters, fetch_fields, context){
    //    var deferred = Ext.create('Deft.Deferred'),
    //        pageSize = 200;
    //
    //    var store = Ext.create('Rally.data.wsapi.Store',{
    //        model: model,
    //        fetch: fetch_fields,
    //        filters: query_filters,
    //        context: context,
    //        pageSize: pageSize
    //    });
    //
    //    PortfolioItemCostTracking.WsapiToolbox.fetchWsapiCount(model, query_filters).then({
    //        success: function(totalRecords){
    //            var promises = [],
    //                totalPages = Math.ceil(totalRecords/pageSize);
    //
    //            for (var i=0; i< totalPages; i++){
    //                promises.push(PortfolioItemCostTracking.WsapiToolbox.loadStorePage(i, store));
    //            }
    //
    //            Deft.Promise.all(promises).then({
    //                success: function(results){
    //                    deferred.resolve(_.flatten(results));
    //                },
    //                failure: function(msg){
    //                    deferred.reject(msg);
    //                }
    //            });
    //        },
    //        failure: function(msg){
    //            deferred.reject(msg);
    //        }
    //    });
    //
    //    return deferred;
    //},
    //loadStorePage: function(pageNum, store){
    //    var deferred = Ext.create('Deft.Deferred');
    //
    //    store.loadPage(pageNum, {
    //        callback: function(records, operation){
    //            if (operation.wasSuccessful()){
    //                deferred.resolve(records);
    //            } else {
    //                deferred.reject(operation.error.errors.join(','));
    //            }
    //
    //        }
    //    });
    //
    //    return deferred;
    //},
    //fetchReleases: function(timebox){
    //
    //    var deferred = Ext.create('Deft.Deferred'),
    //        rec = timebox.getRecord(),
    //        me = this;
    //
    //    if (rec === null) {
    //        deferred.resolve([]);
    //    }
    //
    //    Ext.create('Rally.data.wsapi.Store',{
    //        model: 'Release',
    //        fetch: ['ObjectID'],
    //        filters: [{
    //            property: 'Name',
    //            value: rec.get('Name')
    //        },{
    //            property: 'ReleaseStartDate',
    //            value: rec.get('ReleaseStartDate')
    //        },{
    //            property: 'ReleaseDate',
    //            value: rec.get('ReleaseDate')
    //        }],
    //        limit: Infinity
    //    }).load({
    //        callback: function(records, operation, success){
    //            if (success){
    //                deferred.resolve(records);
    //            }   else {
    //                deferred.reject("Error loading Releases: " + operation.error.errors.join(','));
    //            }
    //        }
    //    });
    //    return deferred;
    //},
    //
    //fetchAllowedValues: function(model,field_name) {
    //    var deferred = Ext.create('Deft.Deferred');
    //
    //    Rally.data.ModelFactory.getModel({
    //        type: model,
    //        success: function(model) {
    //            model.getField(field_name).getAllowedValueStore().load({
    //                callback: function(records, operation, success) {
    //                    var values = Ext.Array.map(records, function(record) {
    //                        return record.get('StringValue');
    //                    });
    //                    deferred.resolve(values);
    //                }
    //            });
    //        },
    //        failure: function(msg) { deferred.reject('Error loading field values: ' + msg); }
    //    });
    //    return deferred;
    //},
    //fetchPortfolioItemTypes: function(){
    //    var deferred = Ext.create('Deft.Deferred');
    //    console.log('fetchPortfolioItemTypes', new Date());
    //    var store = Ext.create('Rally.data.wsapi.Store', {
    //        model: 'TypeDefinition',
    //        fetch: ['TypePath', 'Ordinal','Name'],
    //        filters: [
    //            {
    //                property: 'Parent.Name',
    //                operator: '=',
    //                value: 'Portfolio Item'
    //            },
    //            {
    //                property: 'Creatable',
    //                operator: '=',
    //                value: 'true'
    //            }
    //        ],
    //        sorters: [{
    //            property: 'Ordinal',
    //            direction: 'ASC'
    //        }]
    //    });
    //    store.load({
    //        callback: function(records, operation, success){
    //            console.log('fetchPortfolioItemTypes callback', new Date());
    //            if (success){
    //                var portfolioItemTypes = new Array(records.length);
    //                _.each(records, function(d){
    //                    //Use ordinal to make sure the lowest level portfolio item type is the first in the array.
    //                    var idx = Number(d.get('Ordinal'));
    //                    portfolioItemTypes[idx] = { typePath: d.get('TypePath'), name: d.get('Name') };
    //                    //portfolioItemTypes.reverse();
    //                });
    //                deferred.resolve(portfolioItemTypes);
    //            } else {
    //                var error_msg = '';
    //                if (operation && operation.error && operation.error.errors){
    //                    error_msg = operation.error.errors.join(',');
    //                }
    //                deferred.reject('Error loading Portfolio Item Types:  ' + error_msg);
    //            }
    //        }
    //    });
    //    return deferred.promise;
    //},
    //fetchDoneStates: function(){
    //    var deferred = Ext.create('Deft.Deferred');
    //    console.log('fetchDoneStates', new Date());
    //    Rally.data.ModelFactory.getModel({
    //        type: 'HierarchicalRequirement',
    //        success: function(model) {
    //            var field = model.getField('ScheduleState');
    //            field.getAllowedValueStore().load({
    //                callback: function(records, operation, success) {
    //                    console.log('fetchDoneStates callback', new Date());
    //                    if (success){
    //                        var values = [];
    //                        for (var i=records.length - 1; i > 0; i--){
    //                            values.push(records[i].get('StringValue'));
    //                            if (records[i].get('StringValue') == "Accepted"){
    //                                i = 0;
    //                            }
    //                        }
    //                        deferred.resolve(values);
    //                    } else {
    //                        deferred.reject('Error loading ScheduleState values for User Story:  ' + operation.error.errors.join(','));
    //                    }
    //                },
    //                scope: this
    //            });
    //        },
    //        failure: function() {
    //            var error = "Could not load schedule states";
    //            deferred.reject(error);
    //        }
    //    });
    //    return deferred.promise;
    //}
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("WorkspaceActivityApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'display_box', layout: 'hbox'}
    ],


    integrationHeaders : {
        name : "WorkspaceActivityApp"
    },
    supportedTypeDefinitions: {
        hierarchicalrequirement: {
            TypePath: 'hierarchicalrequirement',
            Name: "User Story",
            DateField: 'LastUpdateDate'
        },
        defect: {
            TypePath: 'defect',
            Name: "Defect",
            DateField: 'LastUpdateDate'
        },
        testcase: {
            TypePath: 'testcase',
            Name: "Test Case",
            DateField: 'LastUpdateDate'
        },
        task: {
            TypePath: 'task',
            Name: "Task",
            DateField: 'LastUpdateDate'
        },
        portfolioitem: {
            TypePath: 'portfolioitem',
            Name: "Portfolio Item",
            DateField: 'LastUpdateDate'
        },
        testcaseresult: {
            TypePath: 'testcaseresult',
            Name: 'Test Case Result',
            DateField: 'Date'
        }
    },
    daysBackDefault: 60,

    launch: function() {

        this.selectedWorkspaces = [this.getContext().getWorkspace()];

        Rally.technicalservices.WsapiToolbox.fetchWorkspaces().then({
            success: function(results){
                this.workspaces = results;
                this.logger.log('fetchArtifactTypes: ', this.supportedTypeDefinitions);
                this._addSelectors();
            },
            failure: function(msg){
                Rally.ui.notify.Notifier.showError({message: msg});
            },
            scope: this
        });

    },
    _addSelectors: function(){
        this.down('#display_box').removeAll();

        var buttonWidth = 150;

        var selectorCt = this.down('#display_box').add({
            xtype: 'container',
            itemId: 'selector-ct',
            layout: 'vbox',
            flex: 1,
            padding: 5
        });

        selectorCt.add({
            xtype: 'rallybutton',
            text: 'Select Workspaces...',
            width: buttonWidth,
            cls: 'secondary',
            listeners: {
                click: this._selectWorkspaces,
                scope: this
            },
            margin: 10
        });


        selectorCt.add({
            xtype: 'rallynumberfield',
            itemId: 'nb-days',
            fieldLabel: 'Days to Lookback',
            labelAlign: 'right',
            labelStyle: "font-family: ProximaNovaSemiBold,Helvetica,Arial;font-weight: normal;text-transform:uppercase;font-size: 12px;",
            value: this.daysBackDefault,
            minValue: 0,
            labelAlign: 'top',
            margin: 10
        });

        var supportedTypeDefinitions = this.supportedTypeDefinitions,
            artifactOptions = _.map(_.keys(supportedTypeDefinitions), function(key){
                return { boxLabel: supportedTypeDefinitions[key].Name, name: 'selectedTypes', inputValue: supportedTypeDefinitions[key].TypePath, checked: true };
        });

        selectorCt.add({
            xtype: 'checkboxgroup',
            fieldLabel: 'Artifact Types',
            itemId: 'chk-selected-types',
            labelAlign: 'right',
            labelStyle: "font-family: ProximaNovaSemiBold,Helvetica,Arial;font-weight: normal;text-transform:uppercase;font-size: 12px;",
            columns: 1,
            vertical: true,
            margin: 10,
            labelAlign: 'top',
            items: artifactOptions
        });

        selectorCt.add({
            xtype: 'rallybutton',
            text: 'Update',
            width: buttonWidth,
            cls: 'primary',
            listeners: {
                click: this._update,
                scope: this
            },
            margin: '20 10 10 10'
        });
        this.down('#display_box').add({
            xtype: 'container',
            itemId: 'grid_box',
            tpl: '<tpl>{message}</tpl>',
            flex: 3
        });
    },

    _update: function(){
        var daysBack = this.down('#nb-days') && this.down('#nb-days').getValue(),
            selectedTypes = this.down('#chk-selected-types') && this.down('#chk-selected-types').getValue() && this.down('#chk-selected-types').getValue().selectedTypes || [],
            selectedContexts = this._getSelectedContexts();

        this.logger.log('_update', daysBack, selectedTypes);

        this.down('#grid_box').removeAll();
        this.down('#grid_box').update({message: ""});

        if (selectedTypes.length > 0 && selectedContexts.length > 0){
            if (!Ext.isArray(selectedTypes)){
                selectedTypes = [selectedTypes];
            }
            this._fetchData(daysBack, selectedTypes, selectedContexts);
        } else {
            this.down('#grid_box').update({message: 'Please select at least 1 Artifact Type, Days Back > 0, and at least 1 selected Context (Workspace and/or Project)'});
        }
    },
    _fetchData: function(daysBack, selectedTypes, selectedContexts){
        this.logger.log('_fetchData', daysBack, selectedTypes, selectedContexts);
        var filters = [],
            me = this,
            promises = [];

        this.setLoading(true);
        this.workspacesLoaded = 0;
        this.workspacesTotal = selectedContexts.length;

        Ext.Array.each(selectedContexts, function(context){
            promises.push(function(){return me._fetchContextCount(context, selectedTypes, daysBack)});
        }, this);

        Deft.Chain.sequence(promises).then({
            success: function(results){
                this.logger.log('Promises success', results.length, results);
                this._addGrid(_.flatten(results));
                this.setLoading(false);
            },
            failure: function(msg){
                this.logger.log('Promises failure', msg);
                Rally.ui.notify.Notifier.showError({message: 'Error fetching counts:  ' + msg});
                this.setLoading(false);
            },
            scope: this
        });

    },
    _selectWorkspaces: function(){
        this.logger.log('_selectWorkspaces', this.workspaces);
        Ext.create('Rally.technicalservices.dialog.PickerDialog',{
            records: this.workspaces,
            selectedRecords: this.selectedWorkspaces,
            displayField: 'Name',
            listeners: {
                scope: this,
                itemselected: this._workspacesSelected
            }
        });
    },
    _workspacesSelected: function(records){
        this.logger.log('_workspacesSelected', records);
         if (records.length > 0){
            this.selectedWorkspaces = records;
        } else {
            this.selectedWorkspaces = [this.getContext().getWorkspace()];
        }
    },

    _addGrid: function(data){


        var fields = _.keys(data[0]),
            store = Ext.create('Rally.data.custom.Store',{
            fields: fields,
            data: data,
            pageSize: data.length
        }),
            pageSize = data.length;
        this.logger.log('_addGrid', data, fields, pageSize);

        this.down('#grid_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: this._getColumnCfgs(),
            pageSize: pageSize,
            showPagingToolbar: false
        });
    },
    _getColumnCfgs: function(){
        return [{
            dataIndex: 'workspace',
            text: 'Workspace',
            flex: 2
        },{
        //    dataIndex: 'project',
        //    text: 'Project',
        //    flex: 2
        //},{
            dataIndex: 'artifactType',
            text: 'Type',
            flex: 1
        },{
            dataIndex: 'count',
            text: 'Count'
        }];
    },
    _fetchContextCount: function(context, selectedTypes, daysBack){
        var promises = [],
            deferred = Ext.create('Deft.Deferred');

        var daysBackDate = null,
            supportedTypeDefs = this.supportedTypeDefinitions;
        if (daysBack > 0){
            daysBackDate = Rally.util.DateTime.toIsoString(Rally.util.DateTime.add(new Date(), 'day', -daysBack));
        }

        Ext.Array.each(selectedTypes, function(artifactType){
            var filters = [];
            if (daysBackDate){
                filters.push({
                    property: supportedTypeDefs[artifactType].DateField,
                    operator: '>=',
                    value: daysBackDate
                });
            }

            var config = {
                model: artifactType,
                context: context,
                filters: filters
            }

            promises.push(function(){return Rally.technicalservices.WsapiToolbox.fetchWsapiCount(config)});
        });

        Rally.technicalservices.promise.ParallelThrottle.throttle(promises, selectedTypes.length).then({
            success: function(results){
                this.incrementWorkspacesLoaded();

                var data = [];
                for(var i=0; i<results.length; i++){
                    var artifactName = supportedTypeDefs[selectedTypes[i]].Name;
                    data.push({
                        workspace: context.workspaceName,
                        project: context.projectName,
                        artifactType: artifactName,
                        count: results[i],
                        error: null
                    });
                }
                deferred.resolve(data);
            },
            failure: function(message){
                this.incrementWorkspacesLoaded();

                deferred.resolve([{
                    workspace: context.workspaceName,
                    project: context.projectName,
                    artifactType: null,
                    count: null,
                    error: message
                }]);
            },
            scope: this
        });

        return deferred;
    },
    incrementWorkspacesLoaded: function(){
        this.logger.log('incrementWorkspacesLoaded');
        this.setLoading(Ext.String.format("Loading {0} of {1} Workspaces", this.workspacesLoaded, this.workspacesTotal));
        this.workspacesLoaded++;
    },
    _buildCustomStore: function(selectedTypes, selectedContexts, results){
        this.logger.log('_buildCustomStore', selectedTypes, selectedContexts, results);
    },
    _getSelectedContexts: function(){
        this.logger.log('_getSelectedContexts');

        return _.map(this.selectedWorkspaces, function(wksp){

            return {
                workspace: wksp._ref || wksp.get('_ref'),
                project: null,
                workspaceName: wksp.Name || wksp.get('Name'),
                projectName: null
            };
        });
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('WorkspaceActivityApp', {
                   name: 'Workspace Activity'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>